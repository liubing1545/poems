# -*- encoding:UTF-8 -*-import osfrom datetime import datetimefrom flask import Flaskfrom flask_sqlalchemy import SQLAlchemyfrom werkzeug.security import generate_password_hash, check_password_hashfrom itsdangerous import (TimedJSONWebSignatureSerializer as Serializer, BadSignature, SignatureExpired)# 取得工程目录basedir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))app = Flask(__name__)# # 数据库配置app.config['SQLALCHEMY_DATABASE_URI'] =\    'sqlite:///' + os.path.join(basedir, 'data.sqlite')app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = True# 数据db = SQLAlchemy(app)# 用户种别class UserType:    # 普通    NORMAL = 0x00    # 达人    TALENT = 0x01    # 作者    AUTHOR = 0x02    # 明星    STAR = 0x04    # 协助管理员    MODERATE_COMMENT = 0x08    # 管理员    ADMINISTRATOR = 0x10# 审批状态class ApproveStates:    # 申请    APPLY = 0x00    # 受理    ACCEPT = 0x01    # 处理中    DOING = 0x02    # 通过    PASS = 0x04    # 拒绝    CANCEL = 0x08# 申请内容class ApproveContent:    # 达人    TO_TALENT = 0x01    # 作者    TO_AUTHOR = 0x02    # 明星    TO_STAR = 0x04    # 协助管理员    TO_MODERATE_COMMENT = 0x08    # 管理员    TO_ADMINISTRATOR = 0x10    # 以外    OTHER = 0x00# 性别class Sex:    # 男    MALE = 0x01    # 女    FEMALE = 0x02    # 其他    OTHER = 0x00# 朋友表class Friend(db.Model):    # 表名    __tablename__ = "friends"    # 自己ID    follower_id = db.Column(db.Integer, db.ForeignKey('users.user_id'), primary_key=True)    # 朋友ID    followed_id = db.Column(db.Integer, db.ForeignKey('users.user_id'), primary_key=True)    # 关注时间    followed_date = db.Column(db.DateTime, default=datetime.utcnow())# 用户表class User(db.Model):    # 表名    __tablename__ = 'users'    # 用户ID,自动生成    user_id = db.Column(db.Integer, primary_key=True, autoincrement=True)    # 用户昵称,不超过20位,不能出现重复    user_name = db.Column(db.String(20), unique=True, index=True, nullable=False)    # 用户头像    user_img = db.Column(db.String(100))    # 用户邮件    user_email = db.Column(db.String(40), unique=True, nullable=False)    # 用户电话号码    user_tel = db.Column(db.String(11), unique=True, nullable=False)    # 用户密码    user_pwd_hash = db.Column(db.String(128), nullable=False)    # 用户类型    user_type = db.Column(db.Integer, default=UserType.NORMAL)    # 个人简介    user_comment = db.Column(db.TEXT)    # 注册时间    reg_dateTime = db.Column(db.DateTime, nullable=False, default=datetime.utcnow())    # 注销标志    del_flag = db.Column(db.Boolean, default=False)    # 注销时间    del_date = db.Column(db.DateTime)    # 诗歌评论    articleMessage = db.relationship("ArticleMessage", backref="user", lazy="dynamic")    # 诗歌集评论    poemsMessages = db.relationship("PoemsMessage", backref="user", lazy="dynamic")    # 喜欢的作者    authors = db.relationship("Author", secondary="favoriteAuthors", backref=db.backref("users", lazy="dynamic"),                              lazy="dynamic")    # 收藏诗歌    articles = db.relationship("Article", secondary="collectArticles", backref=db.backref("users", lazy="dynamic"),                               lazy="dynamic")    # 关注自己的    followed = db.relationship('Friend', foreign_keys=[Friend.follower_id],                               backref=db.backref('follower', lazy='joined'),                               lazy='dynamic', cascade='all, delete-orphan')    # 自己关注的    follower = db.relationship('Friend', foreign_keys=[Friend.followed_id],                               backref=db.backref('followed', lazy='joined'),                               lazy='dynamic', cascade='all, delete-orphan')    # 录入作品列表    created_articles = db.relationship("Article", backref="inputer", lazy="dynamic")    def hash_password(self, password):        self.user_pwd_hash = generate_password_hash(password)    def verify_password(self, password):        return check_password_hash(self.user_pwd_hash, password)    def generate_auth_token(self, expiration=600):        s = Serializer(app.config['SECRET_KEY'], expires_in=expiration)        return s.dumps({'id': self.id})    @staticmethod    def verify_auth_token(token):        s = Serializer(app.config['SECRET_KEY'])        try:            data = s.loads(token)        except SignatureExpired:            return None        except BadSignature:            return None        user = User.query.get(data['id'])        return user# TODO# # 审批表# class Approve(db.Model):#     # 表名#     __tablename__ = "approve"##     # 审批No#     approve_No = db.Column(db.Integer, primary_key=True, autoincrement=True)#     # 用户ID#     user_id = db.Column(db.Integer, db.ForeignKey('user.user_id'), nullable=False)#     # 申请内容#     approve_content = db.Column(db.Integer, nullable=False)#     # 补充内容#     approve_comment = db.Column(db.Text)#     # 状态#     approve_flag = db.Column(db.Integer, nullable=False, default=ApproveStates.APPLY)#     # 审批者ID#     approve_id = db.Column(db.Integer, db.ForeignKey('user.user_id'))#     # 审批意见#     approve_opinion = db.Column(db.Text, nullable=False)#     # 审批日#     approve_date = db.Column(db.DateTime, nullable=False)# 作品类型表class ArticleType(db.Model):    # 表名    __tablename__ = "articleTypes"    # 作品类型ID    type_id = db.Column(db.Integer, primary_key=True, autoincrement=True)    # 类型名称    type_name = db.Column(db.String(40), nullable=False)    # 作品列表    articles = db.relationship("Article", backref="type", lazy="dynamic")# 作者表class Author(db.Model):    # 表名    __tablename__ = "authors"    # 作者ID    author_id = db.Column(db.Integer, primary_key=True, autoincrement=True)    # 作者拼音    author_eName = db.Column(db.String(40), nullable=False, unique=True)    # 作者姓名    author_name = db.Column(db.String(40), nullable=False)    # 作者出生日    author_birth = db.Column(db.String(40))    # 作者性别    author_sex = db.Column(db.Integer, nullable=False, default=Sex.MALE)    # 作者国籍    author_country = db.Column(db.String(50))    # 作者图片    author_image = db.Column(db.String(100))    # 作者简介    author_introduce = db.Column(db.Text)    # 作品列表    articles = db.relationship("Article", backref="author", lazy="dynamic")    def to_json(self):        json_author = {            'author_name': self.author_name,            'author_country': self.author_country,            'author_introduce': self.author_introduce,            'articles': self.articles        }        return json_author# 作品表class Article(db.Model):    # 表名    __tablename__ = "articles"    # 作品ID    article_id = db.Column(db.Integer, primary_key=True, autoincrement=True)    # 作品名    article_name = db.Column(db.String(100), nullable=False)    # 作者ID    author_id = db.Column(db.Integer, db.ForeignKey("authors.author_id"))    # 作品类型    article_type = db.Column(db.Integer, db.ForeignKey("articleTypes.type_id"))    # 作品内容    article_content = db.Column(db.Text, nullable=False)    # 录入者    input_userId = db.Column(db.Integer, db.ForeignKey("users.user_id"), nullable=False)    # 录入时间    input_dateTime = db.Column(db.DateTime, default=datetime.utcnow(), nullable=False)    # 收藏数    article_collect_count = db.Column(db.Integer, default=0)    # 评论列表    articleMessages = db.relationship("ArticleMessage", backref="article", lazy="dynamic")    # # 修改履历    # modifiedContents = db.relationship("ModifiedContents", backref="article", lazy="dynamic")    def to_json(self):        json_article = {            'author_id': self.author_id,            'article_name': self.article_name,            'article_content': self.article_content,            # 'stars_num': self.stars_num,        }        return json_article# TODO# # 作品修改履历表# class ModifiedContents(db.Model):#     # 表名#     __tablename__ = "modifiedContents"##     # No#     modified_No = db.Column(db.Integer, primary_key=True, autoincrement=True)#     # 修改作品ID#     modified_article_id = db.Column(db.Integer, db.ForeignKey("article_table.article_id"), nullable=False)#     # 修改内容#     modified_content = db.Column(db.Text, nullable=False)#     # 修改理由#     modified_reason = db.Column(db.Text, nullable=False)#     # 修改提出者#     modified_userID = db.Column(db.Integer, db.ForeignKey("users_table.user_id"), nullable=False)#     # 修改者提出日期#     modified_date = db.Column(db.DateTime, nullable=False)#     # 审核通过Flag  改成状态#     approve_flag = db.Column(db.Boolean, default=False)#     # 审核者ID#     approve_id = db.Column(db.Integer, db.ForeignKey("users_table.user_id"))#     # 审核日期#     approve_date = db.Column(db.Date)# 收藏表collectArticles = db.Table("collectArticles",                           db.Column("collect_id", db.Integer, db.ForeignKey("users.user_id"), primary_key=True),                           db.Column("collect_article_id", db.Integer, db.ForeignKey("articles.article_id"),                                     primary_key=True),                           db.Column("collect_date", db.DateTime, nullable=False, default=datetime.utcnow())                           )# 喜欢的作者favoriteAuthors = db.Table("favoriteAuthors",                           db.Column("user_id", db.Integer, db.ForeignKey("users.user_id"), primary_key=True),                           db.Column("favorite_author_id", db.Integer, db.ForeignKey("authors.author_id"),                                     primary_key=True),                           db.Column("favorite_date", db.DateTime, nullable=False, default=datetime.utcnow())                           )# 诗集class Poem(db.Model):    # 表名    __tablename__ = "poems"    # 诗集ID    poem_id = db.Column(db.Integer, primary_key=True, autoincrement=True)    # 创建用户ID    reg_user_id = db.Column(db.Integer, db.ForeignKey("users.user_id"))    # 诗集名称    poem_name = db.Column(db.String(50), nullable=False)    # 诗集简介    poem_introduce = db.Column(db.Text)    # 诗集封面图像    poem_img = db.Column(db.String(100))    # 创建时间    reg_date = db.Column(db.Date, nullable=False)    # 诗歌集评论    poemMessages = db.relationship("PoemMessage", backref="poem", lazy="dynamic")    # 诗集详细    articles = db.relationship("Article", secondary="poemsList", backref=db.backref("poem", lazy="dynamic"),                               lazy="dynamic")# 诗集详细表poemList = db.Table("poemList",                    db.Column("poem_id", db.Integer, db.ForeignKey("poems.poem_id"), primary_key=True),                    db.Column("article_id", db.Integer, db.ForeignKey("articles.article_id"), primary_key=True),                    db.Column("reg_date", db.DateTime, nullable=False, default=datetime.utcnow())                    )# 诗集评论表class PoemMessage(db.Model):    # 表名    __tablename__ = "poemMessages"    # 评论No    no = db.Column(db.Integer, primary_key=True, autoincrement=True)    # 诗集ID    poem_id = db.Column(db.Integer, db.ForeignKey("poems.poem_id"), nullable=False)    # 评论者ID    observer_id = db.Column(db.Integer, db.ForeignKey("users.user_id"), nullable=False)    # 评论内容    comment = db.Column(db.Text, nullable=False)    # 评论时间    editTime = db.Column(db.DateTime, nullable=False, default=datetime.utcnow())# 诗歌评论表class ArticleMessage(db.Model):    # 表名    __tablename__ = "articleMessages"    # 评论No    no = db.Column(db.Integer, primary_key=True, autoincrement=True)    # 诗歌ID    article_id = db.Column(db.Integer, db.ForeignKey("articles.article_id"), nullable=False)    # 评论者ID    observer_id = db.Column(db.Integer, db.ForeignKey("users.user_id"), nullable=False)    # 评论内容    comment = db.Column(db.Text, nullable=False)    # 评论时间    editTime = db.Column(db.DateTime, nullable=False, default=datetime.utcnow())if __name__ == "__main__":    db.drop_all()    db.create_all()